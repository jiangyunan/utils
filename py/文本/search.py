import ahocorasick
import string
import math

class Search:
    """搜索相关类
    """
    def __init__(self, words):
        self.words = words
        self.automaton = ahocorasick.Automaton()
        for idx, word in enumerate(words):
            self.automaton.add_word(word, (idx, word))
        self.automaton.make_automaton()

    @classmethod
    def from_file(cls, file_path):
        """从文件读取词, 每行一个词

        Args:
            file_path (str): 文件位置

        Returns:
            SensitiveWordDetector: _description_
        """
        with open(file_path, 'r', encoding='utf-8') as file:
            words = [line.strip() for line in file if line.strip()]
        return cls(words)

    def is_word_boundary(self, text, index):
        """判断是否为一个单词
        """
        if index < 0 or index >= len(text):
            return True
        return text[index] in string.whitespace + string.punctuation

    def search_en(self, text):
        """英文搜索

        Args:
            text (str): 要搜索的文本

        Returns:
            list: [(索引, 匹配到的词)]
        """
        # 将文本转换为小写
        text = text.lower()

        results = []
        for end_index, (idx, word) in self.automaton.iter(text):
            start_index = end_index - len(word) + 1
            if self.is_word_boundary(text, start_index - 1) and self.is_word_boundary(text, end_index + 1):
                results.append((start_index, word))
        return results
    
    def search_cn(self, text):
        results = []
        for end_index, (idx, word) in self.automaton.iter(text):
            start_index = end_index - len(word) + 1
            results.append((start_index, word))
        return results
    
    def contains_word(self, text):
        """文本中是否存在词

        Args:
            text (str): 需要判断的文本

        Returns:
            bool: _description_
        """
        for end_index, (insert_order, original_value) in self.automaton.iter(text):
            return True
        return False

    def replace_words(self, text, replace_char='*'):
        """替换词为指定字符

        Args:
            text (str): 文本
            replace_char (str, optional): 替换的字符. Defaults to '*'.

        Returns:
            list: [替换成功的结果, [替换的原词]]
        """
        matches = []
        words = set()
        for end_index, (insert_order, original_value) in self.automaton.iter(text):
            words.add(original_value)
            start_index = end_index - len(original_value) + 1
            matches.append((start_index, end_index))

        # Create a list of characters from the text
        text_chars = list(text)

        # Replace sensitive words with the specified character
        for start_index, end_index in matches:
            for i in range(start_index, end_index + 1):
                text_chars[i] = replace_char

        # Join the list back into a string
        return [''.join(text_chars), list(words)]
    
    def calculate_relevance_score(self, text):
        """计算匹配词在所有关键词中占比分数

        Args:
            text (str): 文本

        Returns:
            float: 分数
        """
        # 将文本转换为小写
        text = text.lower()
        
        # 查找匹配到的关键词
        matched_keywords = set()
        for end_index, (idx, keyword) in self.automaton.iter(text):
            matched_keywords.add(keyword)
        
        # 计算相关性分数
        relevance_score = len(matched_keywords) / len(self.words) if self.words else 0
        return relevance_score
    
    def calculate_length_ratio(self, text):
        """计算匹配词长度在文本长度的占比

        Args:
            text (str): _description_

        Returns:
            float: _description_
        """
        # 将文本转换为小写
        text = text.lower()
        
        # 计算匹配到的关键词总长度
        total_keyword_length = 0
        for end_index, (idx, keyword) in self.automaton.iter(text):
            total_keyword_length += len(keyword)
        
        # 计算文本全文长度
        text_length = len(text)
        
        # 计算匹配到的关键词总长度与文本全文长度的比值
        length_ratio = total_keyword_length / text_length if text_length > 0 else 0
        return length_ratio

if __name__ == '__main__':
    # 使用示例
    # words = ["机票", "改签"]
    # matcher = Search(words)
    matcher = Search.from_file("./static/aviation.txt")

    text = "事与愿违放假前的最后一个工作日，在请假回来的路上突然收到航班取消的通知，这个时候距离航班起飞还不到5小时，首先是感觉离谱，然后开始上网搜航班取消的解决办法以及相应赔偿，因为自己是第一次遇见这种事情，还是有点不知所措的，相当于把自己原本的计划全部打乱。到家后开始不间断的拨打深圳航空的客服电话，一直无法接通，APP上的人工客服也显示一直在排队中，期间有在想如果真的去不成的话，如何把损失降低到最小，酒店住宿还可以退，但是路上的路费和返程的机票以及自己做的攻略就全部功归一溃。心里还是想再尝试，坚信自己今晚一定能飞走，于是收拾行李，准备去机场问现场的工作人员看有没有解决办法。航班被取消sad耗时一个半小时，终于在开始检票的时候打通了人工客服，客服人员的态度倒是很好，但回答我的却是当天没有其他航司直飞的航班，但我在家看的时候还有，证明在我未拨打电话成功的期间，有人改签直飞航班成功了。所以我只能退而求其次的选择到临近的城市，最后选择了晚上7点多飞往济南的航班，今晚可以出发的问题解决了，下一个迎面而来的问题就是，济南到临沂的车次全部售空，打车要花费200-300以上，刚刚收到12306候补失败的消息，且从临近城市到临沂这期间的所有花费由个人承担，航司并不补偿。目前我能想到的解决方案就是买短乘长，从途中经过的经停站开始买票，期间晚上12.左右可以到临沂的，而从济南机场到济南高铁站坐车又是一个新的问题，一个是到达时间太晚没有地铁和公交，另一个是距离太远可能赶不上最后一班高铁。但希望我能顺利解决这些问题，希望老天爷老天奶厚待我，可以顺顺利利的赶上车，现在旁边泡着泡面解决我的晚餐，先吃饱再说希望一切顺利吧。窗外夜景泉城济南哦对了，还是不要慌，我可能因为当时太慌，脑袋里面要做的事情太多，在家的时候忘记把小相机装进书包里了，过安检的时候才发现，冷静下来，calm down。every-thing be ok!要相信自己是可以做到和解决的，凡事发生必有利于我，加油加油加油！最后下飞机取到行李出来之后已经没有去往济南高铁的车次了，唯一剩下的是去到泉城广场附近的大巴，在售票处买票的时候遇见了拉人的，要我300多还是拼车，果断放弃。买好票之后把高铁票退掉，然后在车上开始搜索泉城广场附近的海底捞，准备预约排号，然后人太满根本排不上。与小红书姐妹的深夜聊天开始在小红书上搜索晚上11点能在济南去哪逛，在评论区看见一个可以借黑海会员的，于是去私聊了一下，没想到真的回复了，姐妹非常热情，巧合的她还是半个临沂人，得知我是一个人出门旅游和晚上的离奇遭遇还愉快的聊了一会儿，推荐了我济南和临沂好吃好玩的地方。果然旅途中意外的发生往往伴随着意料之外的惊喜，还是要看自己的心态如何。用小姐姐的黑海会员成功排上号，在5.1的凌晨吃上了一个人海底捞火锅，服务的小姐姐看我是一个人，拿礼物的时候给我拿了两人份哈哈哈😁吃完后在海底捞过夜解决住宿问题，果然海底捞是大学生的夜晚聚集地，在沙发上躺着的全是大学生，睡到4.30收拾收拾去济南汽车站，在路上走了曲水庭街那条路，早上真清净啊，鸟鸣格外明显，路过了百花洲、大明湖、月牙泉、曲水流觞亭，浅看了一下济南的日出，有机会再来一次济南好好的玩一玩。浅看一下济南早上的日出🌅琅琊古城在六点左右就上了去往临沂的大巴，好家伙，坐了半个小时准备要发车的时候，换车坐了，现在车开了，争取在车上补一觉。中午快12.左右抵达临沂，一下车就看见了小商品城和成排用红色三轮车拉人的老爷爷，不太敢坐。简单修整了一下之后，下午骑共享电动车去吃午饭。这是距离上次去电动车店试骑后，第一次自己成功骑车，刚开始还有点慌慌的，不敢开太快，动不动双脚就想沾地。后来慢慢的适应了，可以开在20左右了哈哈哈，但开心没多久，在还车的时候上台阶，一激灵一下子拧的加速，差点撞上旁边的车还好没啥大事，第一次上路体验以结尾的小小失败告终。电动车上路ing临沂炒鸡没吃成，只剩下别的鸡了，得提前预订，转战去吃了台湾第一香的炸串、煎饼和米汉堡，米汉堡好吃😋双层米饭中间夹着肥而不腻的肉，米饭之间还留有着肉香，吃完饭去看了临沂孔庙的两棵千年的古银杏树，孔子的生平事迹和他的弟子们，里面并不是很大简单逛了逛。随后去了王羲之故居，可参观游览的地方很多，拍照也很出片，里面还有个寺庙和地下的晋墓博物馆，看了书法字画，赏了洗砚池和曲水流觞，后去了忻州里，类似于商业古城街，里面是各种餐饮和小吃。点了个临沂本地奶茶山住茶，要了个王羲之联名的，杯套很好看，奶味很浓。书圣王羲之故居一角本来想去新琅琊来着，但是手机电量不充足，于是去了泰盛广场，看了随着音乐节奏喷出的小型喷泉，看室内瀑布上豪华厕所，旁边不远就是蓝田步行街，买了华丰卷煎饼，它的买法是把食材放在一个个独立的塑料袋里面，然后选择自己想吃的，看见了鲅鱼煎饼但是没敢尝试。买了里脊夹饼，吃了臭豆腐（外面是脆的，里面汁水很丰富，有一种会爆开的感觉） 还买了网上都说好吃的董记生煎包，但是排完号等回去取得时候，因为停电做不了退款了所以没吃成。边吃边逛了步行街，可以说是集美食卖衣服百货一条街。本来是想看看沂河夜景的，但是一个人太晚了还有点累了，洗漱之后规划一下明天的行程就睡觉了。早上6.30赶大早骑电动车去了朝阳糁馆，喝了牛肉糁还加了个油条和火烧，确实胡椒味很浓，牛肉片还蛮多的，临走打包了一屉小笼包去琅琊古城了。到琅琊古城第一站就去看了国秀琅琊，表演很震撼，各种特效，舞美、音效以及灯光的配合，这一个小时值得一看。起早吃早餐糁一共分为四幕：小鹿从舞台跑过开启第一幕的东夷文化，讲述人类祖先生活，运用智慧与自然力量相处和对抗。人类文明开始发展，展开第二幕礼乐春秋，礼仪之邦的缘起，用萧皇后的大婚庆典进行演绎。第三幕忠肝义胆，讲述蒙恬大战匈奴，士兵奋勇战斗，最后却因始皇去世后，赵高和胡亥发动政变，蒙恬在被逼无奈下选择了自杀，结束了自己的生命，其中贯穿着何以家国的思想。第四幕群贤雅集，介绍了各种在琅琊这座城市中生活过的先人（书圣王羲之、智圣诸葛亮、算圣刘洪）闪耀在历史星空，在此处留下绚烂痕迹。在最后的那一片水幕洒向全部观众也照亮了尾声的盛世琅琊，期待着它从未落幕，在退场的时候捡了开场洒下的亮片算是带走了表演的一个瞬间。结束之后又去看了室外的《校场演兵》、《扶摇云裳》、《有凤来仪》，感慨着演技人员的厉害和背后的不易。后面就开始瞎逛游了，每个店都进去走走看看：忻州考院、商贸管、管鲍分金馆、山东的鲁南大鼓、了解这个城市的历史和文化，在秦一统后称之为琅琊，战争时期的红色沂蒙文化，到现代的商品物流之城。喜欢这场表演场次的数字快到5.30看了《图腾飞舞》、《漫山铁花》、《水秀》，铁花表演是三场里面最好看的，真的很震撼，眼前是无数火花从山间蔓延而下，目之所及都是金色的火光。表演到8点结束，出去看了看夜景，逛了一天的感受下来，整体来说就是身处一个巨大的古城建筑中，像古人在旧时生活那般，再加上全天都有演出和歌舞表演以及古装装扮的游客更增加了一种真实感，还可以玩一些小游戏之类的，体验感还算不错。前提是做好时间安排和攻略，要不然因为五一的人流量体验感会大打折扣。在路边等车的时候把充电宝借给一个带小孩的妈妈，巧合的是我们正好可以坐一辆公交车。在车上说话的时候，问她在哪下，她说想要去看灯光秀，我就告诉她哪位置最好，毕竟我可做了不少攻略，然后旁边的阿姨就说阳光沙滩也可以，正好坐的这个公交车也到，本来我是在犹豫要不要一起去看看，但因为回酒店有点远，于是放弃。但运气还不错灯光秀、电视塔、阳光沙滩、沂州里夜景都在公交车上看见了。更加巧合的是，我明天要去济宁，而这个姐姐就是济宁的，但是她说济宁没啥好玩的才带着孩子来临沂的，还劝我说把票退了，让我跟着她去玩哈哈哈哈，抱着探索新城市的想法明天就要去济宁了。顺便一说，竟然听出来我是东北来的，我的东北口音如此明显么，一直以为我说的普通话啊😂在公交车上看到的电视塔运河之都现在在去济宁的路上，早上路过的时候买了山东特产奶钙饼干🍪中午到济宁了，这个酒店的位置真的十分难找，这里的公交车站牌都有写古诗、文言文和注释算是一个特色吧。买了街边的鸡肉土豆丝夹饼，这个量感觉那两个薄薄的饼皮完全夹不住，都要溢出来了。下午去太白楼了，看了李白曾经生活过23年的地方，以及在这片齐鲁大地上写下的诸多诗句。逛了竹竿巷（这个没啥可逛的，卖的都是家具用品）和白天的古运河。东大寺并不能进去，就在外面看了看，在去铁塔寺的路上看见了古槐树，铁塔寺是是为了求子还愿所建筑的八角楼阁风格，是中国现存最高、最完整的宋代铁塔，也是全国仅存的四大铁塔之一，顺带看了一眼旧馆的展览（一般）。太白楼之后去吃了豆腐脑蛙鱼和扁串，蛙鱼的口感很特别，有一种胶胶的质感，加了小料之后是咸的。在店里吃完又去找华子夹饼，是拿华夫饼铁盘现压出来的，坐外面吃的时候遇见了个小狗，给他分了点，聪明小狗不吃饼皮只吃里面馅料，等我吃完了要回去了，还跟着我走了好一段路。回酒店休息一会儿，等到晚上出去逛了秀水城夜市和运河夜景，游船没坐上排队的人太多。从酒店到运河的这一路可以说是十分热闹，唱歌的，摆摊的，卖小吃的。本来是把所有闹钟都取消了，想着这几天终于不用早起可以睡到自然醒了，结果起的比每天都早，我也是佩服自己，只好起床收拾，去喝了羊糁汤，这个里面有鸡蛋但并没有像临沂一样的黑胡椒味，还点了一个烫面角，上了之后才发现是有点像长条形状的饺子。运河夜景之后就去了济宁博物馆（新馆），第一次体验博物馆还没开门就到了，工作人员很好让我提前进去，体验了一下VIP的感觉。之前只知道京杭大运河的起点杭州和终点北京，却是第一次了解京杭大运河流经于此，是运河最高点、元明清三代运河河道总督衙门所在地，“济宁通则全河通，济宁滞则全河停”是诸多朝代管理的要塞地带，名副其实的运河之都。逛完了博物馆之后又去了图书馆和美术馆，大概到下午的时候本来是要去太明湖景区的，但是因为下雨再加上实在是走不动了，就回去了。途中被问路的人叫老师了哈哈哈，山东人民真刻入骨髓的礼仪。吃了出济宁就吃不到的葡萄鸡丁，一开始给上成了宫保鸡丁，我还疑问咋没有葡萄，后来说上错了又给我重新做了一份。吃起来是酸甜的口感，有点像小时候喝的饮料水晶葡萄那味。葡萄鸡丁为了买当地冰箱贴回去纪念，去了运河记忆文创店，问老板冰箱贴上的方言是什么意思的时候，老板想用东北话解释怕我听不懂，我就说我就是从东北来的你说吧，结果一问发现是老乡，倍感亲切。后来就是一顿交流，从济宁文创现状，济宁美食，以及来济宁人流量的增多到各地的文创章和他自己的收藏，说到后面看我是自己一个人大老远跑过来的还送我他毛笔亲手写的扇子和书签🔖，感受到了来自老乡的热情。下午去人民公园散散步，在这里看到了穆桂英大破天门阵的\"一天门\"，济宁八大景之一的\"峄岫晴云\"，和打太极拳的老人。晚上去吃了甏肉干饭，是提前卤好的各种配菜，想要吃什么就可以加，选择纠结症点了个套餐，味道还可以，让我不吃青椒的人都吃了两口。在核桃园附近有浣笔泉遗址，李白常常在此处浣笔而得名，里面不是很大，有个泉眼汩汩流出。这里还是小吃一条街，一个人吃不完根本吃不完，看不过来都。点了个山东的本地奶茶“阿水大杯茶”感觉和平时的奶茶没啥区别，也有可能是我喝不出来。感谢文创店老板晚上早早的回去睡觉了，结果有蚊子半夜嗡嗡的，醒了好几次，然后就又叒叕早起了，去附近早餐店买了个菜包，感觉就是韭菜盒子加粉条做成了圆形。到火车站又买了个菜煎饼，其实根本吃不了，但一想着出了这里就吃不到所以还是买了，就是煎饼果子的皮里面卷着各类铁板炒好的菜。在火车上提前订了个临沂炒鸡，准备打包带走，不知道味道如何，感觉当地美食应该都七七八八的吃完了，肯定也有落下的但比较出名的应该都吃到了。取到了临沂炒鸡，一盘鸡可真大，一进屋满桌子都是炒鸡可真火啊，点完炒鸡顺便去买了个九中老白串串香当作午饭，味道很不错，感觉比台湾第一香的要好吃一点😋，应该是酱料比较好吃的原因。感觉山东人民的咬肌应该很大，有时候煎饼是真嚼不动啊，嚼劲真足。到机场开始候机，希望我的临沂炒鸡可以一切顺利不要撒出来。（后记：到家了，从行李箱把装了里三层外三层的炒鸡拿出来，不出意外的汤汁洒出来了，还好包装的严实，没有弄到行李箱上，尝了一下，点的微辣也有点辣，鸡肉很入味，配上小饼沾上仅剩的汤汁味道还不错）临沂炒鸡许你相见总体这趟山东游下来，无论这三个哪个城市，绿化是真的不错，街边的花直接让我走不动道，芍药和月季开得真的好旺盛。而且这里的电动车真的好多，尤其在济宁，真的是各走各的，有一种完全不管死活的感觉，在临沂还敢骑一下，在济宁尝试一次后果断放弃。但公交车真的很惠民，节假日和高峰期可以免费乘坐，而且会等你扶好把手或坐好后再启动，跟东北生猛的公交车真的不一样(没有任何贬低东北的意思，毕竟我上班有时是靠司机力挽狂澜踩点打卡的)。物价都不算很高，在可以接受的范围内，遇到的人也都很好，很热情，但方言真的听不太懂，感觉只有东北话不加密了。街边绿化带一处这次旅行真的是遇见了各种意料之外的惊喜，意外的从晚上飞机改签到济南，在网上遇见了在济南生活的临沂人，在临沂公交车上遇见了从济宁来玩的妈妈，在济宁文创店遇见了东北老乡在这里生活，整整一个前后呼应，完美闭环了。现在正在飞往长春的飞机上写下这些文字，虽说这次游玩也有遗憾，比如，因改签导致预约的汉墓竹简博物馆没有参观、新琅琊夜景的表演没有看到、水上公交也没坐成、沂河灯光秀也只是在公交车上遥望一下、因身体劳累疲顿和天气原因也没有去成的太白湖，但万事不能求全圆满，要给下一次的旅游留有余地和想要再来一次的念想。打火花瞬间再后记：出去玩的时候醒的一天比一天早，还不是特别困，到了工作日怎么都起不来，还感觉自己浑身被打了一样酸疼，也是佩服自己的身体。再次验证了在外旅游，提前做好攻略，再加上大方主动，积极询问才会得到自己想要的答案，甚至是意外之喜，有时候不要不好意思，张嘴多问一下没什么的，没准会增加你的旅游体验感。但还是希望下次不要再遇见机票改签的事情了:)你好呀"
    matches = matcher.search(text)
    for match in matches:
        print(f"Found '{match[1]}' at index {match[0]}")
